plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.liquibase.gradle' version '2.2.0'
	id 'co.uzzu.dotenv.gradle' version '4.0.0'
}

group = 'com.sheikhimtiaz'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation("org.springframework.boot:spring-boot-starter-aop:3.4.5")

	// Database
	implementation 'org.postgresql:r2dbc-postgresql'
	implementation 'org.postgresql:postgresql:42.2.10'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'io.projectreactor.addons:reactor-extra'
	implementation 'org.liquibase:liquibase-core'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

	// kafka
	implementation 'org.springframework.kafka:spring-kafka'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'me.paulschwarz:spring-dotenv:2.5.4'

	// Logging dependencies
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'org.slf4j:slf4j-api'

	// For MDC (Mapped Diagnostic Context) support
	implementation 'org.slf4j:slf4j-ext'

	// Metrics
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Api Doc
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.8.6'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "org.testcontainers:testcontainers:1.19.1"
	testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
	testImplementation "org.testcontainers:postgresql:1.19.1"
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	liquibaseRuntime sourceSets.main.output
	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	liquibaseRuntime "org.postgresql:postgresql:42.2.24"
	liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.31.1'
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-r2dbc'
}

apply plugin: "org.liquibase.gradle"
//diffChangeLog.dependsOn compileJava

def getTimestamp() {
	def date = new Date()
	return date.format('yyyyMMddHHmmss')
}
tasks.named('test') {
	useJUnitPlatform()
}

final MIGR_NAME = "src/main/resources/db/changelogs/changelog_" + getTimestamp() + ".yaml"

liquibase {
	activities {
		main {
			driver 'org.postgresql.Driver'
			url "jdbc:postgresql://${env.PG_HOST.value}:${env.PG_PORT.value}/${env.PG_DATABASE.value}"
			username env.PG_USER.value
			password env.PG_PASSWORD.value
			changelogFile 'src/main/resources/db/db.master.xml'
			logLevel 'debug'
		}
	}
}


task('root changeLog') {
	doFirst(){
		liquibase {
			activities {
				main {
					changelogFile "src/main/resources/db/db.master.xml"
				}
			}
		}
	}
}
update.dependsOn('root changeLog')

rollbackCount.dependsOn('root changeLog')

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}



